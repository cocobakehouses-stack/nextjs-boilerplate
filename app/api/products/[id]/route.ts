// app/api/products/[id]/route.ts
import { NextResponse } from 'next/server';
import { google } from 'googleapis';
// üëá ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤ lib/sheets ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà app/api/lib/sheets ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ)
import { getAuth } from 'app/lib/sheets.ts/lib/sheets';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

const PRODUCTS_TAB = 'Products';

function parseNum(x: any) {
  const n = Number(String(x ?? '').replace(/,/g, '').trim());
  return Number.isFinite(n) ? n : NaN;
}

export async function PATCH(req: Request, context: any) {
  try {
    const spreadsheetId = process.env.GOOGLE_SHEETS_ID!;
    if (!spreadsheetId) {
      return NextResponse.json({ error: 'Missing GOOGLE_SHEETS_ID' }, { status: 500 });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á id ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å type context ‡πÉ‡∏´‡πâ Next ‡πÇ‡∏ß‡∏¢
    const { id } = (context?.params ?? {}) as { id?: string };
    const idNum = parseNum(id);
    if (!Number.isFinite(idNum)) {
      return NextResponse.json({ error: 'Invalid product id' }, { status: 400 });
    }

    const body = await req.json().catch(() => ({}));
    if (typeof body?.active !== 'boolean') {
      return NextResponse.json({ error: 'active must be boolean' }, { status: 400 });
    }
    const active: boolean = body.active;

    const auth = getAuth();
    const sheets = google.sheets({ version: 'v4', auth });

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: `${PRODUCTS_TAB}!A:D`,
    });
    const values: (string | number)[][] = res.data.values ?? [];

    // ‡∏´‡∏≤ row ‡∏ó‡∏µ‡πà ID ‡∏ï‡∏£‡∏á (data ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß 1 ‡πÄ‡∏õ‡πá‡∏ô header)
    let rowIndex = -1; // index ‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå values (0 ‡∏Ñ‡∏∑‡∏≠ header, 1 ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï)
    for (let i = 1; i < values.length; i++) {
      if (parseNum(values[i]?.[0]) === idNum) {
        rowIndex = i;
        break;
      }
    }
    if (rowIndex === -1) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 });
    }

    // ‚úÖ ‡πÅ‡∏Å‡πâ off-by-one: ‡πÅ‡∏ñ‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï = rowIndex + 1 (1-based)
    const rowNumber = rowIndex + 1;
    const range = `${PRODUCTS_TAB}!D${rowNumber}:D${rowNumber}`;

    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range,
      valueInputOption: 'USER_ENTERED',
      requestBody: { values: [[active ? 'TRUE' : 'FALSE']] },
    });

    return NextResponse.json({ ok: true });
  } catch (e: any) {
    console.error('PATCH /api/products/[id] error', e?.message || e);
    return NextResponse.json({ error: e?.message || 'failed' }, { status: 500 });
  }
}
